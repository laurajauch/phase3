#:kivy 1.0

<PyTextInput@TextInput>:
	background_color: (1,1,1,1) #defaults to white
	#if red, reset to white:
	on_focus: self.background_color=(1,1,1,1)

<PyButton@Button>:
	background_color: (1,1,1,1) #defaults to white
	#if red, reset to white:
	on_press: self.background_color=(1,1,1,1)

<PyDropButton@PyButton>:
	italic: True

Widget: 
	plot_image: 'data/jeff sax.jpg'
	status: ""
	energyError: ""
	degreesFreedom: ""
	numElements: ""
	#background color, plotting window
	canvas:
		Color:
			rgba: .1, .2, .3, .8
		Rectangle:
			pos: self.pos
			size: self.size
	canvas.after:
		Rectangle:
			id: plot
			source: root.plot_image
			pos: (370, 270)
			size: (426, 320)


	Label:
		text: 'Welcome to the PyCamellia Incompressible Flow Solver!'
		pos: (133, 530)
		font_size: 13

	Label:
		text: 'Reynolds \n Number:'
		font_size: 12
		pos: (225, 451)

	Label:
		text: 'Inflow Conditions:'
		pos: (50, 367)

	Label:
		text: 'Outflow Conditions:'
		pos: (50, 192)
	Label:
		text: 'Velocity:'
		pos: (170, 367)

	#Label:
	#	text: 'Solution'
	#	pos: (500, 200)

	Label:
		text: "Status: "
		pos: (460, 200)

	Label:
		id: status
		text: root.status
		pos: (560, 200)

	Label:
		text: 'Energy Error: '
		pos: (440, 175)
	

	Label:
		id: energyError
		text: root.energyError
		pos: (540, 175)
	Label:
		text: "Num of Elements: "
		pos: (425, 140)
	Label:
		id: numElements
		text: root.numElements
		pos: (525, 140)
	Label:
		text: "Degrees of Freedom: "
		pos: (416, 110)
	Label:
		id:degreesFreedom
		text: root.degreesFreedom
		pos: (516, 110)

	Label:
		text: "Filename: "
		pos: (440, 55)


	#Filename entry text field
	PyTextInput:
		id: filename
		multiline: False
		height: '30dp'
		width: '120dp'
		pos: (527, 90)

	#Reynolds number entry text field
	PyTextInput:
		id: reynolds
		multiline: False
		height: '30dp'
		width: '50dp'
		pos: (304, 485)

	#Polynomial Order Label
	Label:
		text: "Polynomial\n         Order:"
		font_size: 12
		pos: (107, 451)

	#Polynomial Order entry Text field
	PyTextInput:
		id: polyOrder
		multiline: False
		height: '30dp'
		width: '50dp'
		pos: (193, 485)

	#Mesh Dimensions
	Label:
		text: '            Mesh\nDimensions:'
		font_size: 12
		pos: (30,407)
	#Mesh Dimensions Label
		pos: (16,407)

	PyTextInput:
		id: meshDim
		multiline: False
		height: '30dp'
		width: '80dp'
		pos: (108 , 440)
		font_size: 13
		hint_text: '3.0 x 5.0'

	#Mesh Elements
	Label:
		text: '      Mesh\nElements:'
		font_size: 12
		pos: (178,407)
	PyTextInput:
		id:meshElems
		multiline: False
		height: '30dp'
		width: '60dp'
		pos: (265 , 440)
		font_size: 13
		hint_text: '4 x 6'


	#Reset button - should clear all fields
	Button:
		id: reset
		background_color: 
		height: 5
		width: '130dp'
		font_name: 'DroidSans'
		font_size: 15
		text: "Reset"
		pos: (220, 112)
		color: (1, 1, 1, 1)
		on_release: app.reset()

	#Solve button - should initiate input check and solution
	Button:
		id: solve
		height: 5
		background_color: (1, .1, .1, .9)
		font_name: 'DroidSans'
		font_size: 15
		text: "Solve"
		pos: (141, 50)
		color: (1, 1, 1, 1)
		on_release: app.solve()

	#File load button, should load solution
	PyButton:
		id: load
		background_color: 
		height: 5
		font_size: 15
		font_name: 'DroidSans'
		text: "Load"
		pos: (420, 50)
		color: (1, 1, 1, 1)
		on_release: app.load()

	#File save button, should save current solution
	PyButton:
		id: save
		background_color: 
		height: 5
		font_size: 15
		font_name: 'DroidSans'
		text: "Save"
		reset_text: "Save"
		disabled: True
		pos: (580, 50)
		color: (1, 1, 1, 1)
		on_release: app.save()

	#Problem Type dropdown menu
		name: 'DropDown'
		__safe_id: [dropdown.__self__]

	PyDropButton:
		id: probType
		pos: (56, 527)
		width: '250dp'
		height: '30dp'
		text: 'Problem Type »'
		reset_text: 'Problem Type »'
		on_release: dropdown.open(self)
		size_hint_y: None

	DropDown:

		id: dropdown
		on_parent: self.dismiss()
		on_select: probType.text = '{}'.format(args[1])

		Button:
			text: 'Stokes'
			size_hint_y: None
			height: '30dp'
			on_release: dropdown.select('Stokes »'); probType.italic=False
			on_release: reynolds.disabled = True; reynolds.clear()
			on_release: transient.disabled = False

		Button:
			text: 'Navier-Stokes'
			size_hint_y: None
			height: '30dp'
			on_release: dropdown.select('Navier-Stokes »'); probType.italic=False
			on_release: reynolds.disabled = False
			on_release: transient.disabled = True
			on_release: stateType.clear(); dropdown1.select('Steady State »'); stateType.italic=False

	#State selection dropdown menu
	PyDropButton:
		id: stateType
		pos: (18, 485)
		width: '100dp'
		height: '30dp'
		text: 'State »'
		reset_text: 'State »'
		on_release: dropdown1.open(self)
		size_hint_y: None

		name: 'DropDown'
		__safe_id: [dropdown1.__self__]
	
	DropDown:

		id: dropdown1
		on_parent: self.dismiss()
		on_select: stateType.text = '{}'.format(args[1])

		Button:
			id: steady
			text: 'Steady State'
			size_hint_y: None
			height: '30dp'
			on_release: dropdown1.select('Steady State »'); stateType.italic=False
		
		Button:
			id: transient
			text: 'Transient'
			size_hint_y: None
			height: '30dp'
			on_release: dropdown1.select('Transient »'); stateType.italic=False

	#Refinement selection dropdown menu
	PyDropButton:
		id: refine
		pos: (220, 195)
		width: '130dp'
		height: '30dp'
		text: 'Refine »'
		reset_text: 'Refine »'
		disabled: True
		on_release: dropdown2.open(self)
		size_hint_y: None

		name: 'DropDown'
		__safe_id: [dropdown2.__self__]

	DropDown:

		id: dropdown2
		on_parent: self.dismiss()
		on_select: refine.text = '{}'.format(args[1])

		Button:
			text: 'h-auto'
			size_hint_y: None
			height: '30dp'
			on_release: dropdown2.select('h-auto »'); refine.italic=False
			on_release: app.refine(self.text)		
		Button:
			text: 'p-auto'
			size_hint_y: None
			height: '30dp'
			on_release: dropdown2.select('p-auto »'); refine.italic=False
			on_release: app.refine(self.text)


	#Plotting selection dropdown menu
	PyDropButton:
		id: plot
		pos: (220, 146)
		width: '130dp'
		height: '30dp'
		text: 'Plot »'
		reset_text: 'Plot »'
		disabled: True
		on_release: dropdown3.open(self)
		size_hint_y: None

		name: 'DropDown'
		__safe_id: [dropdown3.__self__]

	DropDown:

		id: dropdown3
		on_parent: self.dismiss()
		on_select: plot.text = '{}'.format(args[1])

		Button:
			id: mesh			
			text: 'Mesh'
			size_hint_y: None
			height: '30dp'
			on_release: dropdown3.select('Mesh »'); plot.italic=False
			on_release:app.plot(self.text)
			
		
		Button:
			id: error
			text: 'Error'
			size_hint_y: None
			height: '30dp'
			on_release: dropdown3.select('Error »'); plot.italic=False
			on_release:app.plot(self.text)

		Button:
			id: u1
			text: 'u1'
			size_hint_y: None
			height: '30dp'
			on_release: dropdown3.select('u1 »'); plot.italic=False
			on_release:app.plot(self.text)


		Button:
			id: u2
			text: 'u2'
			size_hint_y: None
			height: '30dp'
			on_release: dropdown3.select('u2 »'); plot.italic=False
			on_release:app.plot(self.text)

		Button:
			id: stream
			text: 'Stream Function'
			font_size: 13
			size_hint_y: None
			height: '30dp'
			on_release: dropdown3.select('Stream Function »'); plot.italic=False
			on_release:app.plot(self.text)

		Button:
			id: p
			text: 'p'
			size_hint_y: None
			height: '30dp'
			on_release: dropdown3.select('p »'); plot.italic=False
			on_release:app.plot(self.text)

	#Inflow conditions
	#Inflow 1
	Label:
		text: '1. '
		pos: (20, 335)
	

	PyTextInput:
		id: inf1
		multiline: False
		height: '27dp'
		width: '80dp'
		pos: (85, 375)
		font_size: 12
		hint_text: "x > 5, y = 9"

	Label:
		text: 'x ='
		pos: (147, 338)

	PyTextInput:
		id: inf1_x
		multiline: False
		height: '27dp'
		width: '50dp'
		pos: (210, 375)
		font_size: 11
		hint_text: "x*4"

	Label:
		text: 'y ='
		pos: (234, 338)

	PyTextInput:
		id: inf1_y
		multiline: False
		height: '27dp'
		width: '50dp'
		pos: (300, 375)
		font_size: 11
		hint_text: "y*4"
	
	#Inflow 2
	Label:
		text: '2.'
		pos: (20, 303)
	

	PyTextInput:
		id: inf2
		multiline: False
		height: '27dp'
		width: '80dp'
		pos: (85, 340)
		font_size: 12

	Label:
		text: 'x = '
		pos: (149, 303)

	PyTextInput:
		id: inf2_x
		multiline: False
		height: '27dp'
		width: '50dp'
		pos: (210, 340)
		font_size: 11

	Label:
		text: 'y = '
		pos: (236, 303)

	PyTextInput:
		id: inf2_y
		multiline: False
		height: '27dp'
		width: '50dp'
		pos: (300, 340)
		font_size: 11

	#Inflow 3
	Label:
		text: '3.'
		pos: (20, 267)
	

	PyTextInput:
		id: inf3
		multiline: False
		height: '27dp'
		width: '80dp'
		pos: (85, 305)
		font_size: 12


	Label:
		text: 'x = '
		pos: (149, 267)

	PyTextInput:
		id: inf3_x
		multiline: False
		height: '27dp'
		width: '50dp'
		pos: (210, 305)
		font_size: 11	

	Label:
		text: 'y = '
		pos: (236, 267)

	PyTextInput:
		id: inf3_y
		multiline: False
		height: '27dp'
		width: '50dp'
		pos: (300, 305)
		font_size: 11

	#Inflow 4
	Label:
		text: '4.'
		pos: (20, 231)	

	PyTextInput:
		id: inf4
		multiline: False
		height: '27dp'
		width: '80dp'
		pos: (85, 270)
		font_size: 12

	Label:
		text: 'x = '
		pos: (149, 231)

	PyTextInput:
		id: inf4_x
		multiline: False
		height: '27dp'
		width: '50dp'
		pos: (210, 270)
		font_size: 11

	Label:
		text: 'y = '
		pos: (236, 231)

	PyTextInput:
		id: inf4_y
		multiline: False
		height: '27dp'
		width: '50dp'
		pos: (300, 270)
		font_size: 11

	#Outflow Conditions
	#Outflow 1
	Label:
		text: '1.'
		pos: (20, 162)

	PyTextInput:
		id: out1
		multiline: False
		height: '27dp'
		width: '80dp'
		font_size: 12
		pos: (85, 200)
		hint_text: "x = 9, y < 3"

	
	#Outflow 2
	Label:
		text: '2. '
		pos: (20, 127)

	PyTextInput:
		id: out2
		multiline: False
		height: '27dp'
		width: '80dp'
		font_size: 12
		pos: (85, 165)


	#Outflow 3
	Label:
		text: '3. '
		pos: (20, 93)

	PyTextInput:
		id: out3
		multiline: False
		height: '27dp'
		width: '80dp'
		font_size: 12
		pos: (85, 130) 

	#Outflow 4
	Label:
		text: '4.'
		pos: (20, 58)

	PyTextInput:
		id: out4
		multiline: False
		height: '27dp'
		width: '80dp'
		font_size: 12
		pos: (85, 95)

